# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
  SSH_KEY: ${{ secrets.SSH_SECREAT_KEY }}

jobs:
  build:

    runs-on: ubuntu-24.04
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant all permissions to Gradle Wrapper
      run: chmod 777 ./gradlew

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build --exclude-task test


  deploy:
    runs-on: ubuntu-24.04
    needs: build

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Transfer JAR to Remote Server
        run: |
          echo "$SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            ./build/libs/lionKorea-*-SNAPSHOT.jar \
            $SERVER_USERNAME@$SERVER_IP:/home/$SERVER_USERNAME/app/

      - name: Deploy Application on Remote Server
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP << EOF
            export DB_URL=${{ secrets.DB_URL }}
            export DB_PASSWORD=${{ secrets.DB_URL }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export JWT_SECREATE_KEY=${{ secrets.JWT_SECREATE_KEY }}
            export MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            export MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            export REDIS_HOST=${{ secrets.REDIS_HOST }}
            export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            export REDIS_PORT=${{ secrets.REDIS_PORT }}
            export REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          
            pkill -f 'lionKorea-*-SNAPSHOT.jar' || true
            nohup java -jar /home/$SERVER_USERNAME/app/lionKorea-*-SNAPSHOT.jar > /home/$SERVER_USERNAME/app/app.log 2>&1 &
          EOF

      - name: Clean up
        run: rm -f private_key.pem

####
#  dependency-submission:
#
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up JDK 17
#      uses: actions/setup-java@v4
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#
#    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
#    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
#    - name: Generate and submit dependency graph
#      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
####